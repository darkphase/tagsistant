0.8:
  - Triple tags (a.k.a. machine tags) first implementation!

  - renamed the tags/ directory as store/ and created a new tags/
    directory to allow a cleaner tag management from file managers

  - Alias first implementation. The user can create files in the
    alias/ directory. Each file contains a portion of a query.
	Aliases are listed inside the store/ directory like ordinary
	tags, but prefixed with an "=" sign. When the user includes
	the alias in a query it gets expanded.

  - fixed a bug in src/fuse_operations/flush.c which prevented
    proper file deduplication

  - the same bug caused a "too many open file" error; now fixed

  - first implementation of the negation operator -/ which subtracts
    from the result sets all the files that are tagged with the
	tag following the operator. For example:

	  ~/myfiles/store/t1/t2/-/t3/@@
	
	returns the files tagged as t1 and t2 but not tagged as t3.

0.7:
  - libextractor integration. Tagging plugins have been converted to
    the new API.

  - multiple version of libextractor (0.5.x and >= 0.6.x) are supported.
    The code for 0.6.x still need some testing. The plugins should check
	the values returned by libextractor to avoid meaningless tagging

  - getattr() on relations/tag/... returned succesfully even if tag/
    didn't exist. Fixed.

  - tagsistant_open(), tagsistant_read() and tagsistant_write() now
    reuse the filehandle by saving it in fuse_file_info.fh field.

  - created tagsistant_invalidate_and_set_cache_entries() and used in
    tagsistant_querytree_find_duplicates(), tagsistant_unlink(),
	tagsistant_rmdir() and tagsistant_rename() to properly delete
	cache entries.

  - the plugins save their filter regexp in the repository.ini file
    each in its own section named [mime:mime/type] where mime/type
	is the mime-type processed by the plugin.

  - added a Mutex for the SQLite backend to solve concurrency problems
    related to database locks

  - added deduplication for symlinks; if a link to /some/path exists
    in the repository and a new one is created, the tags of the
	new one are applied to the existing object

  - added a new boolean parameter to tagsistant_querytree_new() to
    explicitly ask for a database connection; where the function
	gets called twice in one operation (rename, symlink, link, ...)
	one call will avoid the database connection creation

  - fixed building with libextractor 1.x (thanks to rkfg for reporting
    and to Ivan Kolmycheck for suggesting the fix).

0.6.1:
  - tag_id cache wasn't invalidated when a tag was renamed. Fixed.
    Thanks to Chiffa for reporting the bug.

  - tagsistant_guess_inode_from_and_set() didn't check object existence
    using a proper SQL query. Fixed by adding multiple condition, one
	for each AND-set, and using group by on object.inode.

  - getattr() on relations/tag/... returned succesfully even if tag/
    didn't exist. Fixed.

  - nonexisting files in stats/ are no longer reported as existing by
    getattr()

0.6:
  - Removed do_reasoning argument from tagsistant_querytree_new(), being
    obsoleted by the '@@' operator.

  - Solved two bugs in deduplication which prevented real unlink() of the
    file from disk and leaved the old inode stored in AND_SET cache.

0.6 rc6:
  - Implemented no reasoning ending tag "@@" which prevents the reasoner
    from being called. Only objects with direct tagging will be returned
	as query results. Very useful while doing housekeeping of the archive,
	moving files in subtags. A new constant has been defined in tagsistant.h:

	  #define TAGSISTANT_QUERY_DELIMITER_NO_REASONING "@@"

	and its value is reported by stats/configuration.
	
  - Added tagsistant_querytree_check_tagging_consistency() call to:
      src/fuse_operations/rmdir.c
      src/fuse_operations/release.c
      src/fuse_operations/flush.c
      src/fuse_operations/unlink.c

  - Changed tagsistant_rename() to return EXDEV if both from and to paths
    are not taggable. This will cause calling program to use
    open-read/write-close cycle to copy files. This is required if you
    are moving myfiles/tags/t1/@/directory/files* to myfiles/tags/t2/@/
    because source files* are not tagsistant managed objects (hence
    is_taggable is 0).

0.6 rc5:
  - Fixed a bug in src/fuse_operations/readdir.c which caused the inclusion
    of '@' and '+' even after a '+/' ending path.

  - fixed a bug in mkdir() which used tagsistant_create_and_tag_object() in
    place of tagsistant_force_create_and_tag_object()

  - reduced reasoner SQL queries

  - enabled some caches, properly working

  - tagsistant_querytree_check_tagging_consistency() moved from
    tagsistant_querytree_new() to fuse_operations, where appropriated:
      getattr.c
	  link.c
	  mkdir.c
	  mknod.c
	  open.c
	  symlink.c

  - mknod() created new files using provided mode_t permissions. If user
    was not granted write permission, following open() and write() calls
    would fail. I've forced S_IWUSR in mknod() mode_t permissions to fix
    the situation.

  - If requested DBD driver is not available, a message is printed

  - Debugging output uses --debug=<profile> switch, where <profile> is a
    string containing any combination of the following flags:

	  b: boot
	  c: cache
	  f: file tree (readdir)
	  F: FUSE operations (open, read, write, symlink, ...)
	  l: low level
	  p: plugin
	  q: query parsing
	  r: reasoning
	  s: SQL queries
	  2: deduplication

  - Implemented tag_id cache.
  
  - Implemented inode resolution by objectname and and_set cache.
  
  - Moved resoning code to reasoner.c

  - Deleted some dead code.

  - Avoided some transactions where no SQL insert/update were involved.

0.6 rc4:
  - When a tagsistant_querytree object was fetch from the cache, the
    transaction_started field were not set accordingly to
    tagsistant_querytree_new() actual parameters, thus preventing proper
    SQL transaction commit. This bug was especially evident inside
    rename() calls.
    
  - stats/ now contains some meaningful files:
      cached_queries: how many queries got cached
      configuration: the whole configuration given at run time
      connections: how many connections to SQL are active
      objects: how many objects are tagged
      relations: how many relations are established
      tags: how many tags have been created

  - repository.ini file implementation

  - removed any warning at compile time

  - code cleanup
    
0.6 rc3:
  - Queries are cached. Since a lot of time is spent by
    tagsistant_querytree_new() in reasoning the tags of a query,
    once is done a copy of the data structure is saved in a hash
    table and later reloaded. Performance improved by a 5-10x.
    
  - Tag removal (rmdir ~/mifiles/tags/a_tag/) lead to an error. Bug
    reported by Lingnan.
    
  - Speeds up reasoning by cutting one SQL query every three.

0.6 rc2:
  - Bug reported by Matei David:
      $ mkdir myfiles/tags/tag-a
      $ mkdir myfiles/tags/tag-b
      $ touch some-file
      $ cp some-file myfiles/tags/tag-a/tag-b/@/
      $ rm myfiles/tags/tag-b/@/some-file
      $ ls myfiles/tags/tag-a/@/
        ls: cannot access myfiles/tags/tag-a/@/some-file: No such file or directory

0.6 rc1:
  - Introduces universal tagging: not just files can be tagged, but
    directories and devices and pipes too.
